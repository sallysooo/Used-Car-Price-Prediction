# -*- coding: utf-8 -*-
"""additional_preprocess.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t-x0cT8likFHZFwBhGUqHmrfqKHdplZk
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

path = '/content/drive/MyDrive/QI group2/Used_cars.csv'

df = pd.read_csv(path, encoding="latin1")

# 컬럼명 정리 (파싱 오류 방지)
df.rename(columns={"price(€)": "price", "power(PS)": "power_ps"}, inplace=True)

# 결측치 및 중복 제거
# df.dropna(inplace=True)
# df.drop_duplicates(inplace=True)

# 이상치 제거
df = df[(df["price"] >= 500) & (df["price"] <= 100000)]
df = df[(df["power_ps"] >= 50) & (df["power_ps"] <= 500)]

# 범주형 변수 인코딩 - MLR, RF, MLP 모두 적용될 수 있도록!
## (1) One-Hot Encoding 적용
df = pd.get_dummies(df, columns=["car_brand", "vehicle_type", "gearbox", "fuel_type"], drop_first=True)

## (2) 모델별 평균 가격 인코딩
model_avg_price = df.groupby("car_model")["price"].mean()
df["car_model_encoded"] = df["car_model"].map(model_avg_price)
df.drop(columns=["car_model"], inplace=True)  # 원본 car_model 컬럼 제거

## (3) Binary Encoding (수리 여부)
df["not_repaired_damage"] = df["not_repaired_damage"].map({"no": 0, "yes": 1})

print(df)

# 최종 데이터 저장
df.to_csv("Used_Cars_Preprocessed.csv", index=False)

print("데이터 전처리 완료")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

path = '/content/drive/MyDrive/QI group2/autos.csv'

df = pd.read_csv(path, encoding="latin1")

# 1. 히스토그램
plt.figure(figsize=(10, 5))
sns.histplot(df['price'], bins=100, kde=True)
plt.title("Histogram of Price")
plt.xlabel("Price")
plt.ylabel("Frequency")
plt.show()

# 2. 박스플롯
plt.figure(figsize=(10, 5))
sns.boxplot(x=df['price'])
plt.title("Boxplot of Price")
plt.xlabel("Price")
plt.show()

# 3. KDE 플롯
plt.figure(figsize=(10, 5))
sns.kdeplot(df['price'], shade=True)
plt.title("Kernel Density Estimation of Price")
plt.xlabel("Price")
plt.ylabel("Density")
plt.show()

# 4. 로그 변환 후 히스토그램
df['log_price'] = np.log1p(df['price'])  # log(1+x) 변환 (0인 값 때문에)
plt.figure(figsize=(10, 5))
sns.histplot(df['log_price'], bins=50, kde=True)
plt.title("Histogram of Log-Transformed Price")
plt.xlabel("Log(Price + 1)")
plt.ylabel("Frequency")
plt.show()

# 1. 비현실적인 값부터 제거
# 가격이 100달러(약 10만원) 미만이거나 100,000달러(약 1.3억 원) 이상이면 제거
df = df[(df['price'] >= 100) & (df['price'] <= 100000)]

Q1 = df['price'].quantile(0.25)
Q3 = df['price'].quantile(0.75)
IQR = Q3 - Q1

# 이상치 기준 설정
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# IQR을 벗어난 값 제거
df = df[(df['price'] >= lower_bound) & (df['price'] <= upper_bound)]

print(lower_bound)
print(upper_bound)

df['log_price'] = np.log1p(df['price'])

# 1. 히스토그램
plt.figure(figsize=(10, 5))
sns.histplot(df['price'], bins=100, kde=True)
plt.title("Histogram of Price")
plt.xlabel("Price")
plt.ylabel("Frequency")
plt.show()

# 2. 박스플롯
plt.figure(figsize=(10, 5))
sns.boxplot(x=df['price'])
plt.title("Boxplot of Price")
plt.xlabel("Price")
plt.show()

# 3. KDE 플롯
plt.figure(figsize=(10, 5))
sns.kdeplot(df['price'], shade=True)
plt.title("Kernel Density Estimation of Price")
plt.xlabel("Price")
plt.ylabel("Density")
plt.show()

# 4. 로그 변환 후 히스토그램
df['log_price'] = np.log1p(df['price'])  # log(1+x) 변환 (0인 값 때문에)
plt.figure(figsize=(10, 5))
sns.histplot(df['log_price'], bins=50, kde=True)
plt.title("Histogram of Log-Transformed Price")
plt.xlabel("Log(Price + 1)")
plt.ylabel("Frequency")
plt.show()

